name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v3.2.0, v4.0.1)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine base and release branches
        id: branches
        run: |
          VERSION="${{ inputs.version }}"
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          RELEASE_BRANCH="release-$MAJOR.$MINOR"

          if [ "$MAJOR" = "3" ]; then
            BASE_BRANCH="dev-v3"
          else
            BASE_BRANCH="main"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

      - name: Create or checkout release branch and update version
        run: |
          VERSION="${{ steps.branches.outputs.version }}"
          RELEASE_BRANCH="${{ steps.branches.outputs.release_branch }}"
          BASE_BRANCH="${{ steps.branches.outputs.base_branch }}"

          # Create or checkout release branch (persistent across patch releases)
          if ! git show-ref --verify --quiet refs/remotes/origin/"$RELEASE_BRANCH"; then
            echo "Creating new release branch $RELEASE_BRANCH from $BASE_BRANCH"
            git checkout -b "$RELEASE_BRANCH" origin/"$BASE_BRANCH"
            git push -u origin "$RELEASE_BRANCH"
          else
            echo "Checking out existing release branch $RELEASE_BRANCH"
            git checkout "$RELEASE_BRANCH"
          fi

          # Update version.json if this is the first release in the series
          MAJOR_MINOR=$(echo "$VERSION" | sed 's/^\(v[0-9]*\.[0-9]*\).*/\1/')
          CURRENT_VERSION=$(jq -r '.version' version.json 2>/dev/null || echo "")

          if [[ "$CURRENT_VERSION" != "$MAJOR_MINOR" ]]; then
            echo "Updating version.json to $MAJOR_MINOR"
            jq --arg version "$MAJOR_MINOR" '.version = $version' version.json > version.json.tmp
            mv version.json.tmp version.json
            git add version.json
            git commit -s -m "Prepare release $VERSION"
            git push origin "$RELEASE_BRANCH"
            echo "Version updated and committed to release branch"
          else
            echo "Version $MAJOR_MINOR already present in release branch"
          fi

      - name: Cherry-pick version commit back to source branch
        run: |
          VERSION="${{ steps.branches.outputs.version }}"
          RELEASE_BRANCH="${{ steps.branches.outputs.release_branch }}"
          BASE_BRANCH="${{ steps.branches.outputs.base_branch }}"

          # Find the version commit on the release branch
          echo "Searching for version commit on $RELEASE_BRANCH"
          git log --oneline "$RELEASE_BRANCH" | head -5
          COMMIT_SHA=$(git log --format="%H %s" "$RELEASE_BRANCH" | grep "Prepare release $VERSION" | head -1 | cut -d' ' -f1)
          echo "Found commit SHA: $COMMIT_SHA"
          echo "Cherry-picking version commit $COMMIT_SHA from $RELEASE_BRANCH to $BASE_BRANCH"

          # Switch to source branch and cherry-pick the version commit from release branch
          git checkout "$BASE_BRANCH"
          git pull origin "$BASE_BRANCH"

          # Check if version commit already exists in source branch
          if git log --format="%s" "$BASE_BRANCH" | grep -q "^Prepare release $VERSION$"; then
            echo "Version commit already exists in $BASE_BRANCH, skipping cherry-pick"
          else
            git cherry-pick --strategy-option theirs "$COMMIT_SHA"
            git push origin "$BASE_BRANCH"
            echo "Version commit cherry-picked to $BASE_BRANCH"
          fi

          # Switch back to release branch for artifact creation
          git checkout "$RELEASE_BRANCH"

      - name: Create and sign release artifacts
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          VERSION="${{ steps.branches.outputs.version }}"
          make create-artifacts VERSION="$VERSION"
          make sign VERSION="$VERSION"

      - name: Create signed tag and draft release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          VERSION="${{ steps.branches.outputs.version }}"

          # Create annotated tag
          git tag --annotate "$VERSION" --message "Release $VERSION"
          git push origin "$VERSION"

          # Create draft release with artifacts
          if [[ "$VERSION" == *"-"* ]]; then
            gh release create "$VERSION" \
              --title "$VERSION" \
              --notes "Release $VERSION - Draft for review" \
              --draft \
              --prerelease \
              _dist/app-$VERSION-*
          else
            gh release create "$VERSION" \
              --title "$VERSION" \
              --notes "Release $VERSION - Draft for review" \
              --draft \
              _dist/app-$VERSION-*
          fi

      # Note: Docs update is triggered automatically when release is published via webhook
      # This ensures human review of draft release before docs automation begins
