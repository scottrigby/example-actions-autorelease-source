name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v3.2.0)'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Determine base branch
        id: base
        run: |
          VERSION="${{ inputs.version }}"
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')

          if [ "$MAJOR" = "3" ]; then
            BASE_BRANCH="dev-v3"
          else
            BASE_BRANCH="main"
          fi

          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.base.outputs.base_branch }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create or checkout release branch
        run: |
          VERSION="${{ inputs.version }}"
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          BRANCH="release-$MAJOR.$MINOR"

          if git show-ref --verify --quiet refs/remotes/origin/"$BRANCH"; then
            echo "Branch $BRANCH exists, checking it out"
            git checkout "$BRANCH"
          else
            echo "Branch $BRANCH does not exist, creating from ${{ steps.base.outputs.base_branch }}"
            git checkout -b "$BRANCH"
            git push -u origin "$BRANCH"
          fi

          echo "branch=$BRANCH" >> $GITHUB_ENV

      - name: Update version
        run: |
          VERSION="${{ inputs.version }}"
          BUILD_DATE=$(date +%Y-%m-%d)
          jq --arg version "$VERSION" --arg build "$BUILD_DATE" '.version = $version | .build = $build' version.json > version.json.tmp
          mv version.json.tmp version.json
          echo "Version updated to $VERSION"

      - name: Commit and push
        run: |
          git add .
          git commit -s -m "Prepare release ${{ inputs.version }}"
          git push origin "${{ env.branch }}"

      - name: Create PR
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          gh pr create \
            --title "Prepare release ${{ inputs.version }}" \
            --body "Automated release preparation for ${{ inputs.version }}" \
            --base ${{ steps.base.outputs.base_branch }} \
            --head "${{ env.branch }}"
