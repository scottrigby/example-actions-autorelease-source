name: Create Release

on:
  repository_dispatch:
    types: [create-release]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version and checkout release branch
        id: version
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          RELEASE_BRANCH="${{ github.event.client_payload.release_branch }}"
          BASE_BRANCH="${{ github.event.client_payload.base_branch }}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

          # Checkout existing release branch (should already exist from prepare-release)
          echo "Checking out release branch $RELEASE_BRANCH"
          git checkout "$RELEASE_BRANCH"

      - name: Cherry-pick version commit back to source branch
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"
          BASE_BRANCH="${{ steps.version.outputs.base_branch }}"

          # Find the version commit on the release branch
          echo "Searching for version commit on $RELEASE_BRANCH"
          git log --oneline "$RELEASE_BRANCH" | head -5
          COMMIT_SHA=$(git log --format="%H %s" "$RELEASE_BRANCH" | grep "Prepare release $VERSION" | head -1 | cut -d' ' -f1)
          echo "Found commit SHA: $COMMIT_SHA"
          echo "Cherry-picking version commit $COMMIT_SHA from $RELEASE_BRANCH to $BASE_BRANCH"

          # Switch to source branch and cherry-pick the version commit from release branch
          git checkout "$BASE_BRANCH"
          git pull origin "$BASE_BRANCH"

          # Check if version commit already exists in source branch
          if git log --format="%s" "$BASE_BRANCH" | grep -q "^Prepare release $VERSION$"; then
            echo "Version commit already exists in $BASE_BRANCH, skipping cherry-pick"
          else
            git cherry-pick --strategy-option theirs "$COMMIT_SHA"
            git push origin "$BASE_BRANCH"
            echo "Version commit cherry-picked to $BASE_BRANCH"
          fi

          # Switch back to release branch for artifact creation
          git checkout "$RELEASE_BRANCH"

      - name: Create and sign release artifacts
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          make create-artifacts VERSION="$VERSION"
          make sign VERSION="$VERSION"

      - name: Create signed tag and draft release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Create annotated tag
          git tag --annotate "$VERSION" --message "Release $VERSION"
          git push origin "$VERSION"

          # Create draft release with artifacts
          if [[ "$VERSION" == *"-"* ]]; then
            gh release create "$VERSION" \
              --title "$VERSION" \
              --notes "Release $VERSION - Draft for review" \
              --draft \
              --prerelease \
              _dist/app-$VERSION-*
          else
            gh release create "$VERSION" \
              --title "$VERSION" \
              --notes "Release $VERSION - Draft for review" \
              --draft \
              _dist/app-$VERSION-*
          fi

      # Note: Docs update is triggered automatically when release is published via webhook
      # This ensures human review of draft release before docs automation begins
