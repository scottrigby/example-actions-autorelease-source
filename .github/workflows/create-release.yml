name: Create Release

on:
  repository_dispatch:
    types: [create-release]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version and setup release branch
        id: version
        run: |
          TITLE="${{ github.event.client_payload.pr_title }}"
          VERSION=$(echo "$TITLE" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?')
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          RELEASE_BRANCH="release-$MAJOR.$MINOR"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

          # Create or checkout release branch (persistent across patch releases)
          if ! git show-ref --verify --quiet refs/remotes/origin/"$RELEASE_BRANCH"; then
            echo "Creating new release branch $RELEASE_BRANCH"
            git checkout -b "$RELEASE_BRANCH"
            git push -u origin "$RELEASE_BRANCH"
          else
            echo "Checking out existing release branch $RELEASE_BRANCH"
            git checkout "$RELEASE_BRANCH"
          fi

      - name: Cherry-pick version commit
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Find the actual commit (not merge commit) with exact subject line
          COMMIT_SHA=$(git log --format="%H %s" "origin/${{ github.event.client_payload.pr_base_ref }}" | grep "^[a-f0-9]\{40\} Prepare release $VERSION$" | head -1 | cut -d' ' -f1)
          echo "Cherry-picking version commit $COMMIT_SHA"

          # Check if commit is already on this branch
          if git merge-base --is-ancestor "$COMMIT_SHA" HEAD; then
            echo "Commit $COMMIT_SHA is already present on release branch, skipping cherry-pick"
          else
            # Cherry-pick using 'theirs' strategy to resolve conflicts by taking the new version
            git cherry-pick --strategy-option theirs "$COMMIT_SHA"
          fi

          git push origin "${{ steps.version.outputs.release_branch }}"

      - name: Create tag and release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          git tag "${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"

          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" == *"-"* ]]; then
            gh release create "$VERSION" \
              --title "$VERSION" \
              --notes "Release $VERSION" \
              --prerelease
          else
            gh release create "$VERSION" \
              --title "$VERSION" \
              --notes "Release $VERSION"
          fi

      - name: Trigger docs update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          repository: ${{ github.repository_owner }}/example-actions-autorelease-docs
          event-type: version-released
          client-payload: |
            {
              "version": "${{ steps.version.outputs.version }}"
            }
